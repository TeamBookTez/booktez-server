import { Request, Response } from "express";

// slack
import slack from "../others/slack/slack";

// library
import constant from "../library/constant";
import response from "../library/response";
import returnCode from "../library/returnCode";

// service
import authService from "../service/auth";

/**
 *  @Ïù¥Î©îÏùº_Ïú†Ìö®ÏÑ±_Í≤ÄÏÇ¨
 *  @route GET /auth/email?email=
 *  @access public
 *  @err 1. ÌïÑÏöîÌïú Í∞íÏù¥ ÏóÜÏùÑ Îïå
 */
const getEmailController = async (req: Request, res: Response) => {
  try {
    const resData: number = await authService.getEmailService(
      req.query.email ? String(req.query.email) : undefined
    );

    if (resData === constant.WRONG_REQUEST_VALUE) {
      return response.dataResponse(
        res,
        returnCode.OK,
        "ÏûòÎ™ªÎêú ÏöîÏ≤≠ Í∞íÏù¥ Îì§Ïñ¥ÏôîÏäµÎãàÎã§.",
        true,
        { isValid: false }
      );
    }

    if (resData === constant.NULL_VALUE) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "ÌïÑÏöîÌïú Í∞íÏù¥ ÏóÜÏäµÎãàÎã§."
      );
    }

    if (resData === constant.WRONG_EMAIL_CONVENTION) {
      return response.dataResponse(
        res,
        returnCode.OK,
        "Ïù¥Î©îÏùº ÌòïÏãùÏóê ÎßûÏßÄ ÏïäÎäî Î©îÏùº Ï£ºÏÜåÏûÖÎãàÎã§.",
        true,
        { isValid: false }
      );
    }

    if (resData === constant.EMAIL_ALREADY_EXIST) {
      return response.dataResponse(
        res,
        returnCode.OK,
        "Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ Ïù¥Î©îÏùºÏûÖÎãàÎã§.",
        true,
        { isValid: false }
      );
    }

    return response.dataResponse(
      res,
      returnCode.OK,
      "ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§.",
      true,
      { isValid: true }
    );
  } catch (err) {
    slack.slackWebhook(req, err.message);
    console.error(err.message);
    return response.basicResponse(
      res,
      returnCode.INTERNAL_SERVER_ERROR,
      false,
      "ÏÑúÎ≤Ñ Ïò§Î•ò"
    );
  }
};

/**
 *  @ÎãâÎÑ§ÏûÑ_Ïú†Ìö®ÏÑ±_Í≤ÄÏÇ¨
 *  @route GET /auth/nickname?nickname=
 *  @access public
 *  @err 1. ÌïÑÏöîÌïú Í∞íÏù¥ ÏóÜÏäµÎãàÎã§.
 */
const getNicknameController = async (req: Request, res: Response) => {
  try {
    const resData = await authService.getNicknameService(
      req.query.nickname ? String(req.query.nickname) : undefined
    );

    if (resData === constant.WRONG_REQUEST_VALUE) {
      return response.dataResponse(
        res,
        returnCode.OK,
        "ÏûòÎ™ªÎêú ÏöîÏ≤≠ Í∞íÏù¥ Îì§Ïñ¥ÏôîÏäµÎãàÎã§.",
        true,
        { isValid: false }
      );
    }

    if (resData === constant.NULL_VALUE) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "ÌïÑÏöîÌïú Í∞íÏù¥ ÏóÜÏäµÎãàÎã§."
      );
    }

    if (resData === constant.WRONG_NICKNAME_CONVENTION) {
      return response.dataResponse(
        res,
        returnCode.OK,
        "10Ïûê Ïù¥ÎÇ¥ ÏòÅÎ¨∏/ÌïúÍ∏Ä/Ïà´ÏûêÎ°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.",
        true,
        { isValid: false }
      );
    }

    if (resData === constant.NICKNAME_ALREADY_EXIST) {
      return response.dataResponse(
        res,
        returnCode.OK,
        "Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ ÎãâÎÑ§ÏûÑÏûÖÎãàÎã§.",
        true,
        { isValid: false }
      );
    }

    return response.dataResponse(
      res,
      returnCode.OK,
      "ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎãâÎÑ§ÏûÑÏûÖÎãàÎã§.",
      true,
      { isValid: true }
    );
  } catch (err) {
    slack.slackWebhook(req, err.message);
    console.error(err.message);
    return response.basicResponse(
      res,
      returnCode.INTERNAL_SERVER_ERROR,
      false,
      "ÏÑúÎ≤Ñ Ïò§Î•ò"
    );
  }
};

/**
 *  @Î°úÍ∑∏Ïù∏
 *  @route Post auth/login
 *  @access public
 *  @err 1. ÌïÑÏöîÌïú Í∞íÏù¥ ÏóÜÏäµÎãàÎã§.
 *       2. Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§.
 *       3. ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.
 */
const postLoginController = async (req: Request, res: Response) => {
  try {
    const resData = await authService.postLoginService(
      req.body.email,
      req.body.password
    );

    if (resData === constant.NULL_VALUE) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "ÌïÑÏöîÌïú Í∞íÏù¥ ÏóÜÏäµÎãàÎã§."
      );
    }

    if (resData === constant.EMAIL_NOT_FOUND) {
      return response.basicResponse(
        res,
        returnCode.NOT_FOUND,
        false,
        "Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§."
      );
    }

    if (resData === constant.PW_NOT_CORRECT) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§."
      );
    }

    return response.dataResponse(
      res,
      returnCode.OK,
      "Ïû•ÏÑúÌòÑÏùò Ï≤´ api ÏÜåÏ§ëÌûà Îã§Î§ÑÏ£ºÏÑ∏Ïöî üíã",
      true,
      resData
    );
  } catch (err) {
    slack.slackWebhook(req, err.message);
    console.error(err.message);
    return response.basicResponse(
      res,
      returnCode.INTERNAL_SERVER_ERROR,
      false,
      "ÏÑúÎ≤Ñ Ïò§Î•ò"
    );
  }
};

/**
 *  @ÌöåÏõêÍ∞ÄÏûÖ
 *  @route POST /auth/signup
 *  @access public
 *  @err 1. ÌïÑÏöîÌïú Í∞íÏù¥ ÏóÜÏùÑ Îïå
 *       2. Ïù¥Î©îÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÑ Îïå
 *       3. ÎãâÎÑ§ÏûÑ ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÑ Îïå
 *       4. Ìå®Ïä§ÏõåÎìú ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÑ Îïå
 *       5. Ïù¥Î©îÏùºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï† Îïå
 *       6. ÎãâÎÑ§ÏûÑÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï† Îïå
 */
const postSignupController = async (req: Request, res: Response) => {
  try {
    const resData = await authService.postSignupService(
      req.body.email,
      req.body.nickname,
      req.body.password
    );

    if (resData === constant.NULL_VALUE) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "ÌïÑÏöîÌïú Í∞íÏù¥ ÏóÜÏäµÎãàÎã§."
      );
    }

    if (resData === constant.WRONG_EMAIL_CONVENTION) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ Ïù¥Î©îÏùº ÌòïÏãù ÏûÖÎãàÎã§."
      );
    }

    if (resData === constant.WRONG_NICKNAME_CONVENTION) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ ÎãâÎÑ§ÏûÑ ÌòïÏãù ÏûÖÎãàÎã§."
      );
    }

    if (resData === constant.WRONG_PASSWORD_CONVENTION) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ Ìå®Ïä§ÏõåÎìú ÌòïÏãù ÏûÖÎãàÎã§."
      );
    }

    if (resData === constant.EMAIL_ALREADY_EXIST) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ïù¥Î©îÏùº ÏûÖÎãàÎã§."
      );
    }

    if (resData === constant.NICKNAME_ALREADY_EXIST) {
      return response.basicResponse(
        res,
        returnCode.BAD_REQUEST,
        false,
        "Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÎãâÎÑ§ÏûÑ ÏûÖÎãàÎã§."
      );
    }

    return response.tokenResponse(
      res,
      returnCode.CREATED,
      "Ïù¥ÎèôÍ∑ºÏùò Î∂ÅÏä§ÌÖåÏñ¥Ï¶àÏóê Ïò® Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§. üòò",
      true,
      resData
    );
  } catch (err) {
    slack.slackWebhook(req, err.message);
    console.error(err.message);
    return response.basicResponse(
      res,
      returnCode.INTERNAL_SERVER_ERROR,
      false,
      "ÏÑúÎ≤Ñ Ïò§Î•ò"
    );
  }
};

/**
 *  @Î°úÍ∑∏Ïù∏_Ïó¨Î∂Ä_Í≤ÄÏÇ¨
 *  @route GET /auth/check
 *  @access public
 *  @err 
 */
const getLoginFlagController = async(req: Request, res: Response) => {
  try {
    const resData = await authService.getLoginFlagService(
      req.user ? true : false
    )
    return response.dataResponse(
      res, 
      returnCode.OK,
      "Î°úÍ∑∏Ïù∏ Ïó¨Î∂Ä ÌôïÏù∏ ÏÑ±Í≥µ.", 
      true, 
      resData
    );
  } catch (err) {
    slack.slackWebhook(req, err.message);
    console.error(err.message);
    return response.basicResponse(
      res,
      returnCode.INTERNAL_SERVER_ERROR,
      false,
      "ÏÑúÎ≤Ñ Ïò§Î•ò"
    );
  }
}

const authController = {
  getEmailController,
  getNicknameController,
  postLoginController,
  postSignupController,
  getLoginFlagController,
};

export default authController;
